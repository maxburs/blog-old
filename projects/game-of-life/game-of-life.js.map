{"version":3,"sources":["src/game-of-life.js"],"names":["GameOfLife","React","createClass","getInitialState","render","style","height","width","Board","status","size","Number","props","i","push","Math","random","play","update","console","log","newStatus","state","forEach","alive","neighbors","top","left","right","bottom","setState","editCell","cell","cells","cellHeight","cellWidth","borderSize","fontSize","boxSizing","borderTop","borderRight","backgroundColor","Cell","handleClick","index","display","borderLeft","borderBottom","Controls","window","onload","ReactDOM","document","getElementById"],"mappings":"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","file":"game-of-life.js","sourcesContent":["//parent component, renders board and controls and connects the two\r\nvar GameOfLife = React.createClass({\r\n    //default board and control state\r\n    getInitialState: function(){\r\n        return {};\r\n    },\r\n    render: function(){\r\n        var style = {\r\n            height: \"100%\",\r\n            width: \"100%\"\r\n        };\r\n        return <div style={style}>\r\n            <Board height=\"75\" width=\"75\" interval=\"250\" play=\"true\" borderSize=\"0\"/>\r\n            <Controls />\r\n            </div>;\r\n    }\r\n});\r\n//contains cells and game logic, accepts game parameters as props\r\n//props include: height={int}, width={int}, play={bool}, interval={float}, borderSize={int}\r\nvar Board = React.createClass({\r\n    getInitialState: function() {\r\n        //todo: break status out of array and into main state for quicker speed\r\n        var status = [];\r\n        var size = Number(this.props.height) * Number(this.props.width);\r\n        for (var i = 0; i < size; i++){\r\n            status.push(Math.random() > .9);\r\n        }\r\n        if (this.props.play === \"true\") {\r\n            //setInterval(this.update, this.props.interval);\r\n        }\r\n        return {width: +this.props.height, height: +this.props.height, status: status, size: size};\r\n    },\r\n    //increments the game of life\r\n    update: function(){\r\n        console.log(\"running update!\");\r\n        //new game of life board status\r\n        var newStatus = [];\r\n        //loops though previous game board and pushes the status of cells to the new board one at a time\r\n        this.state.status.forEach(function(alive, i, status){\r\n            var neighbors = 0;\r\n            //determine if cell is on the top, left, right, or bottom of grid\r\n            var top = this.state.width - i > 0;\r\n            var left = i % this.state.width === 0;\r\n            var right = i % this.state.width === this.state.width - 1;\r\n            var bottom = this.state.size - i < this.state.width + 1;\r\n            /*console.log(\"cell \" + i + \" has properties:\"\r\n                + \"\\n   top = \" + top\r\n                + \"\\n   left = \" + left\r\n                + \"\\n   right = \" + right\r\n                + \"\\n   bottom = \" + bottom);*/\r\n                //check surrounding cells from top left clockwise and increment neighbors if alive\r\n                if (!top && !left && status[i - this.state.width - 1]){\r\n                    neighbors++;\r\n                }\r\n                if (!top && status[i - this.state.width]){\r\n                    neighbors++;\r\n                }\r\n                if (!top && !right && status[i - this.state.width + 1]){\r\n                    neighbors++;\r\n                }\r\n                if (!right && status[i + 1]){\r\n                    neighbors++;\r\n                }\r\n                if (!right && !bottom && status[i + this.state.width + 1]){\r\n                    neighbors++;\r\n                }\r\n                if (!bottom && status[i + this.state.width]){\r\n                    neighbors++;\r\n                }\r\n                if (!bottom && !left && status[i + this.state.width - 1]){\r\n                    neighbors++;\r\n                }\r\n                if (!left && status[i - 1]){\r\n                    neighbors++;\r\n                }\r\n                //console.log(\"cell \" + i + \" has \" + neighbors + \" neighbors\");\r\n                /*\r\n                RULES:\r\n                +  Any live cell with fewer than two live neighbours dies, as if caused by under-population.\r\n                +  Any live cell with two or three live neighbours lives on to the next generation.\r\n                +  Any live cell with more than three live neighbours dies, as if by over-population.\r\n                +  Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\r\n                following code executes rules\r\n                */\r\n                if (neighbors < 2){\r\n                    newStatus.push(false);\r\n                }\r\n                else if (neighbors === 2){\r\n                    if (alive){\r\n                        newStatus.push(true);\r\n                    }\r\n                    else {\r\n                        newStatus.push(false);\r\n                    }\r\n                }\r\n                else if (neighbors === 3){\r\n                    newStatus.push(true);\r\n                }\r\n                else {\r\n                    newStatus.push(false);\r\n                }\r\n        }, this);\r\n        this.setState({status: newStatus});\r\n    },\r\n    editCell: function(cell){\r\n        console.log(\"click!\");\r\n        this.state.status[cell] = !this.state.status[cell];\r\n        this.setState({status: this.state.status});\r\n    },\r\n    render: function(){\r\n        //setTimeout(this.update, this.props.interval);\r\n        var cells = [];\r\n        var cellHeight = 100/this.state.height + \"%\";\r\n        var cellWidth = 100/this.state.width + \"%\";\r\n        for (var i = 0; i < this.state.height * this.state.width; i++) {\r\n            cells.push(\r\n                <Cell\r\n                    status={this.state.status[i] ? \"alive\" : \"dead\"}\r\n                    height={cellHeight}\r\n                    width={cellWidth}\r\n                    key={i}\r\n                    index={i}\r\n                    borderSize={this.props.borderSize}\r\n                    handleClick={this.editCell}\r\n                />\r\n            )\r\n        }\r\n        var style = {\r\n            width: \"100%\",\r\n            height: \"70%\",\r\n            fontSize: \"0px\",\r\n            boxSizing: \"border-box\",\r\n            borderTop: this.props.borderSize + \"px solid black\",\r\n            borderRight: this.props.borderSize + \"px solid black\",\r\n            backgroundColor: \"black\"\r\n        };\r\n        return <div style={style}>{cells}</div>;\r\n    }\r\n});\r\nvar Cell = React.createClass({\r\n    handleClick: function(){\r\n        console.log(\"click1\");\r\n        this.props.handleClick(this.props.index);\r\n    },\r\n    render: function(){\r\n        var style = {\r\n            backgroundColor: this.props.status === \"alive\" ? \"white\" : \"black\",\r\n            height: this.props.height,\r\n            width: this.props.width,\r\n            display: \"inline-block\",\r\n            boxSizing: \"border-box\",\r\n            borderLeft: this.props.borderSize + \"px solid black\",\r\n            borderBottom: this.props.borderSize + \"px solid black\",\r\n        };\r\n        return <div style={style} onClick={this.handleClick}/>\r\n    }\r\n});\r\nvar Controls = React.createClass({\r\n    render: function(){\r\n        return <div>controls go here</div>\r\n    }\r\n});\r\nwindow.onload = function(){\r\n    ReactDOM.render(\r\n    <GameOfLife />,\r\n    document.getElementById(\"container\")\r\n    );\r\n};"]}